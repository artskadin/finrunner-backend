// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  OPERATOR
}

model User {
  id               String    @id @default(uuid()) @db.Uuid
  email            String?   @unique
  telegramId       String    @unique @map("telegram_id")
  telegramUsername String    @unique @map("telegram_username")
  phoneNumber      String?   @map("phone_number")
  fullname         String?
  role             UserRole  @default(USER)
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime? @map("updated_at") @db.Timestamp()

  JWTToken JWTToken[]
  bids     Bid[]      @relation("UserBids")

  @@map("Users")
}

model JWTToken {
  id           String   @id @default(uuid())
  userId       String   @map("user_id") @db.Uuid
  refreshToken String   @unique @map("refresh_token")
  fingerprint  String?
  expiresAt    DateTime @map("expires_at")

  user User @relation(fields: [userId], references: [id])

  @@map("JWT_tokens")
}

enum BidStatus {
  DRAFT
  PAYMENT
  UNPAID
  TRANSACTION_COMPLETE
  AML_FAILED
  REPAYMENT
  COMPLETED
}

model Bid {
  id         String    @id @default(uuid()) @db.Uuid
  fromUserId String    @map("from_user_id") @db.Uuid
  status     BidStatus @default(DRAFT)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt  DateTime? @map("updated_at") @db.Timestamp()

  fromUser             User                   @relation("UserBids", fields: [fromUserId], references: [id])
  payments             Payment[]
  amlCheck             AMLCheck[]
  exchangeRatesHistory ExchangeRatesHistory[]

  @@map("Bids")
}

model Currency {
  id        String @id @default(uuid()) @db.Uuid
  fullname  String @unique
  shortname String @unique
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamp()

  blockchainNetworks CurrencyBlockchainNetwork[]
  fiatProviders      CurrencyFiatProvider[]
  exchangePairsFrom  ExchangePair[]              @relation("FromCurrency")
  exchangePairsTo    ExchangePair[]              @relation("ToCurrency")
  Payment            Payment[]

  @@map("Currencies")
}

model CurrencyBlockchainNetwork {
  id                  String @id @default(uuid()) @db.Uuid
  currencyId          String @map("currency_id") @db.Uuid
  blockchainNetworkId String @map("blockchain_network_id") @db.Uuid

  currency          Currency          @relation(fields: [currencyId], references: [id])
  blockChainNetwork BlockchainNetwork @relation(fields: [blockchainNetworkId], references: [id])

  @@map("Currency_blockchain_networks")
}

model BlockchainNetwork {
  id            String @id @default(uuid()) @db.Uuid
  name          String
  tokenStandart String @unique @map("token_standart")

  fromExchangePair ExchangePair[] @relation("FromBlockchainNetwork")
  toExchangePair   ExchangePair[] @relation("ToBlockchainNetwork")

  currencies   CurrencyBlockchainNetwork[]
  cryptoWallet CryptoWallet[]

  @@map("Blockchain_networks")
}

model FiatProvider {
  id        String           @id @default(uuid()) @db.Uuid
  name      String
  type      FiatProviderType
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime?        @map("updated_at") @db.Timestamp()

  fromExchangePair ExchangePair[]         @relation("FromFiatProvider")
  toExchangePair   ExchangePair[]         @relation("ToFiatProvider")

  currencies       CurrencyFiatProvider[]

  @@map("Fiat_providers")
}

enum FiatProviderType {
  BANK
  PAYMENT_SYSTEM
  PHONE_NUMBER
}

model CurrencyFiatProvider {
  id             String @id @default(uuid()) @db.Uuid
  fiatProviderId String @map("fiat_provider_id") @db.Uuid
  currencyId     String @map("currency_id") @db.Uuid

  fiatProvider FiatProvider @relation(fields: [fiatProviderId], references: [id])
  currency     Currency     @relation(fields: [currencyId], references: [id])

  @@map("Fiat_provider_currencies")
}

enum PaymentType {
  CRYPTO
  FIAT
}

enum PaymentTarget {
  ACCEPT
  PAYOUT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Payment {
  id              String        @id @default(uuid()) @db.Uuid
  type            PaymentType
  target          PaymentTarget
  status          PaymentStatus
  amount          Decimal       @db.Decimal
  bidId           String        @map("bid_id") @db.Uuid
  currencyId      String        @map("currency_id") @db.Uuid
  cryptoWalletId  String?       @unique @map("crypto_wallet_id") @db.Uuid
  deadline        DateTime      @db.Timestamp()
  transactionHash String?       @map("transaction_hash")
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamp()
  updatedAt       DateTime?     @map("updated_at") @db.Timestamp()

  bid           Bid            @relation(fields: [bidId], references: [id])
  currency      Currency       @relation(fields: [currencyId], references: [id])
  cryptoWallet  CryptoWallet?  @relation(fields: [cryptoWalletId], references: [id])
  paymentDetail PaymentDetail?

  @@map("Payments")
}

model PaymentDetail {
  id                  String    @id @default(uuid()) @db.Uuid
  paymentId           String    @unique @map("payment_id") @db.Uuid
  cartNumber          String?   @map("cart_number")
  cartHolder          String?   @map("cart_holder")
  phoneNumber         String?   @map("phone_number")
  cryptoWalletAddress String?   @map("crypto_wallet_address")
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt           DateTime? @map("updated_at") @db.Timestamp()

  payment Payment @relation(fields: [paymentId], references: [id])

  @@map("Fiat_payment_details")
}

enum WalletStatus {
  NEW
  USED
}

model CryptoWallet {
  id                  String       @id @default(uuid()) @db.Uuid
  blockchainNetworkId String       @map("blockchain_network_id") @db.Uuid
  address             String       @unique
  publicKey           String       @unique
  privateKey          String       @unique
  seedPhrase          String?      @unique @map("seed_phrase")
  status              WalletStatus @default(NEW)
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamp()
  updatedAt           DateTime?    @map("updated_at") @db.Timestamp()

  blockchainNetwork BlockchainNetwork           @relation(fields: [blockchainNetworkId], references: [id])
  payment           Payment?
  encryptionKey     CryptoWalletEncryptionKey[]

  @@map("Crypto_wallets")
}

model ExchangePair {
  id               String    @id @default(uuid()) @db.Uuid
  fromCurrencyId   String    @map("from_currency_id") @db.Uuid
  toCurrencyId     String    @map("to_currency_id") @db.Uuid
  markupPercentage Decimal   @map("markup_percentage") @db.Decimal()
  isActive         Boolean   @default(false) @map("is_active") @db.Boolean
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime? @map("updated_at") @db.Timestamp()

  // Связи для криптовалют
  fromBlockchainNetworkId String? @map("from_blockchain_network_id") @db.Uuid
  toBlockchainNetworkId   String? @map("to_blockchain_network_id") @db.Uuid

  // Связи для фиатных валют
  fromFiatProviderId String? @map("from_fiat_provider_id") @db.Uuid
  toFiatProviderId   String? @map("to_fiat_provider_id") @db.Uuid

  fromCurrency          Currency               @relation("FromCurrency", fields: [fromCurrencyId], references: [id])
  toCurrency            Currency               @relation("ToCurrency", fields: [toCurrencyId], references: [id])
  fromBlockchainNetwork BlockchainNetwork?     @relation("FromBlockchainNetwork", fields: [fromBlockchainNetworkId], references: [id])
  toBlockchainNetwork   BlockchainNetwork?     @relation("ToBlockchainNetwork", fields: [toBlockchainNetworkId], references: [id])
  fromFiatProvider      FiatProvider?          @relation("FromFiatProvider", fields: [fromFiatProviderId], references: [id])
  toFiatProvider        FiatProvider?          @relation("ToFiatProvider", fields: [toFiatProviderId], references: [id])
  ratesHistory          ExchangeRatesHistory[]

  @@unique([fromCurrencyId, toCurrencyId, fromBlockchainNetworkId, toBlockchainNetworkId, fromFiatProviderId, toFiatProviderId])
  @@map("Exchange_pairs")
}

model ExchangeRatesHistory {
  id               String   @id @default(uuid()) @db.Uuid
  bidId            String   @map("bid_id") @db.Uuid
  exchangePairId   String   @map("exchange_pair_id") @db.Uuid
  rate             Decimal  @db.Decimal()
  markupPercentage Decimal  @map("markup_percentage") @db.Decimal()
  createdAt        DateTime @map("created_at") @db.Timestamp()

  bid          Bid          @relation(fields: [bidId], references: [id])
  exchangePair ExchangePair @relation(fields: [exchangePairId], references: [id])

  @@map("Exchange_rates_history")
}

enum AMLResult {
  CLEAN
  DIRTY
}

model AMLCheck {
  id        String    @id @default(uuid()) @db.Uuid
  bidId     String    @map("bid_id") @db.Uuid
  result    AMLResult
  source    String?
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime? @map("updated_at") @db.Timestamp()

  Bid Bid @relation(fields: [bidId], references: [id])

  @@map("AML_checks")
}

model CryptoWalletEncryptionKey {
  id             String   @id @default(uuid()) @db.Uuid
  cryptoWalletId String   @map("crypto_wallet_id") @db.Uuid
  iv             String
  fieldName      String   @map("field_name")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp()

  CryptoWallet CryptoWallet @relation(fields: [cryptoWalletId], references: [id])

  @@map("Crypto_wallet_encryption_keys")
}
